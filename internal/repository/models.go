// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0

package repository

import (
	"database/sql/driver"
	"fmt"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

type InvitationStatus string

const (
	InvitationStatusAccepted InvitationStatus = "accepted"
	InvitationStatusPending  InvitationStatus = "pending"
	InvitationStatusRejected InvitationStatus = "rejected"
)

func (e *InvitationStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = InvitationStatus(s)
	case string:
		*e = InvitationStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for InvitationStatus: %T", src)
	}
	return nil
}

type NullInvitationStatus struct {
	InvitationStatus InvitationStatus
	Valid            bool // Valid is true if InvitationStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullInvitationStatus) Scan(value interface{}) error {
	if value == nil {
		ns.InvitationStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.InvitationStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullInvitationStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.InvitationStatus), nil
}

type DirectMessage struct {
	ID         uuid.UUID
	SenderID   uuid.UUID
	ReceiverID uuid.UUID
	Message    string
	CreatedAt  pgtype.Timestamp
}

type Project struct {
	ID        uuid.UUID
	Name      string
	TeamID    uuid.UUID
	CreatedAt pgtype.Timestamp
}

type ProjectPermission struct {
	ID          uuid.UUID
	UserID      uuid.UUID
	ProjectID   uuid.UUID
	Permissions []string
}

type SubTask struct {
	ID         uuid.UUID
	MainTaskID uuid.UUID
	SubTaskID  uuid.UUID
}

type Task struct {
	ID            uuid.UUID
	Content       string
	ProjectID     uuid.UUID
	CreatedAt     pgtype.Timestamp
	Deadline      pgtype.Timestamp
	AttachmentUrl *string
	TaskOrder     int32
}

type TaskAssignment struct {
	ID     uuid.UUID
	UserID uuid.UUID
	TaskID uuid.UUID
}

type Team struct {
	ID        uuid.UUID
	Name      string
	Color     *string
	CreatedAt pgtype.Timestamp
}

type TeamInvitation struct {
	ID         uuid.UUID
	TeamID     uuid.UUID
	SenderID   uuid.UUID
	ReceiverID uuid.UUID
	CreatedAt  pgtype.Timestamp
	Status     InvitationStatus
}

type TeamPermission struct {
	ID          uuid.UUID
	TeamID      uuid.UUID
	UserID      uuid.UUID
	Permissions []string
}

type User struct {
	ID           uuid.UUID
	Email        string
	Password     string
	Username     string
	RefreshToken *string
}
