// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0

package repository

import (
	"database/sql/driver"
	"fmt"
	"time"

	"github.com/google/uuid"
)

type InvitationStatus string

const (
	InvitationStatusAccepted InvitationStatus = "accepted"
	InvitationStatusPending  InvitationStatus = "pending"
	InvitationStatusRejected InvitationStatus = "rejected"
)

func (e *InvitationStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = InvitationStatus(s)
	case string:
		*e = InvitationStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for InvitationStatus: %T", src)
	}
	return nil
}

type NullInvitationStatus struct {
	InvitationStatus InvitationStatus `json:"invitationStatus"`
	Valid            bool             `json:"valid"` // Valid is true if InvitationStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullInvitationStatus) Scan(value interface{}) error {
	if value == nil {
		ns.InvitationStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.InvitationStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullInvitationStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.InvitationStatus), nil
}

type Project struct {
	ID        uuid.UUID `json:"id"`
	Name      string    `json:"name"`
	CreatedAt time.Time `json:"createdAt"`
	Color     string    `json:"color"`
}

type ProjectInvitation struct {
	ID         uuid.UUID        `json:"id"`
	ProjectID  uuid.UUID        `json:"projectId"`
	SenderID   uuid.UUID        `json:"senderId"`
	ReceiverID uuid.UUID        `json:"receiverId"`
	CreatedAt  time.Time        `json:"createdAt"`
	Status     InvitationStatus `json:"status"`
}

type SubTask struct {
	ID         uuid.UUID `json:"id"`
	MainTaskID uuid.UUID `json:"mainTaskId"`
	SubTaskID  uuid.UUID `json:"subTaskId"`
}

type Task struct {
	ID            uuid.UUID  `json:"id"`
	Content       string     `json:"content"`
	ProjectID     uuid.UUID  `json:"projectId"`
	CreatedAt     time.Time  `json:"createdAt"`
	Deadline      *time.Time `json:"deadline"`
	AttachmentUrl *string    `json:"attachmentUrl"`
	TaskOrder     int32      `json:"taskOrder"`
}

type TaskAssignment struct {
	ID     uuid.UUID `json:"id"`
	UserID uuid.UUID `json:"userId"`
	TaskID uuid.UUID `json:"taskId"`
}

type User struct {
	ID           uuid.UUID `json:"id"`
	Email        string    `json:"email"`
	Password     string    `json:"password"`
	Username     string    `json:"username"`
	CreatedAt    time.Time `json:"createdAt"`
	RefreshToken *string   `json:"refreshToken"`
}

type UserProject struct {
	ID        uuid.UUID `json:"id"`
	UserID    uuid.UUID `json:"userId"`
	ProjectID uuid.UUID `json:"projectId"`
	IsOwner   bool      `json:"isOwner"`
}
