// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: team.sql

package repository

import (
	"context"

	"github.com/google/uuid"
)

const addTeamPermissions = `-- name: AddTeamPermissions :exec
INSERT INTO team_permissions ( team_id, user_id,is_owner) VALUES ( $1, $2, $3)
`

type AddTeamPermissionsParams struct {
	Teamid  uuid.UUID `json:"teamid"`
	Userid  uuid.UUID `json:"userid"`
	Isowner bool      `json:"isowner"`
}

func (q *Queries) AddTeamPermissions(ctx context.Context, arg AddTeamPermissionsParams) error {
	_, err := q.db.Exec(ctx, addTeamPermissions, arg.Teamid, arg.Userid, arg.Isowner)
	return err
}

const inviteToTeam = `-- name: InviteToTeam :exec
INSERT INTO team_invitations (team_id, sender_id, receiver_id) VALUES($1,$2,$3)
`

type InviteToTeamParams struct {
	Teamid     uuid.UUID `json:"teamid"`
	Senderid   uuid.UUID `json:"senderid"`
	Receiverid uuid.UUID `json:"receiverid"`
}

func (q *Queries) InviteToTeam(ctx context.Context, arg InviteToTeamParams) error {
	_, err := q.db.Exec(ctx, inviteToTeam, arg.Teamid, arg.Senderid, arg.Receiverid)
	return err
}

const newTeam = `-- name: NewTeam :one
INSERT INTO teams (
		name,
		color
) VALUES (
		$1,
    $2
) RETURNING id, name, color, created_at
`

type NewTeamParams struct {
	Name  string  `json:"name"`
	Color *string `json:"color"`
}

func (q *Queries) NewTeam(ctx context.Context, arg NewTeamParams) (Team, error) {
	row := q.db.QueryRow(ctx, newTeam, arg.Name, arg.Color)
	var i Team
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Color,
		&i.CreatedAt,
	)
	return i, err
}

const resondToTeamInvitation = `-- name: ResondToTeamInvitation :exec
UPDATE team_invitations SET status = $1 where id = $2
`

type ResondToTeamInvitationParams struct {
	Status       InvitationStatus `json:"status"`
	Invitationid uuid.UUID        `json:"invitationid"`
}

func (q *Queries) ResondToTeamInvitation(ctx context.Context, arg ResondToTeamInvitationParams) error {
	_, err := q.db.Exec(ctx, resondToTeamInvitation, arg.Status, arg.Invitationid)
	return err
}
