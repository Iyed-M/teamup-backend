// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: user.sql

package repository

import (
	"context"

	"github.com/google/uuid"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
    email,
    password,
		username,
		refresh_token
) VALUES (
    $1,
    $2,
		$3,
		$4
) RETURNING id, email, password, username, refresh_token
`

type CreateUserParams struct {
	Email        string
	Password     string
	Username     string
	RefreshToken *string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.Email,
		arg.Password,
		arg.Username,
		arg.RefreshToken,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Password,
		&i.Username,
		&i.RefreshToken,
	)
	return i, err
}

const getRefreshToken = `-- name: GetRefreshToken :one
SELECT refresh_token 
FROM users 
WHERE id = $1
`

func (q *Queries) GetRefreshToken(ctx context.Context, userID uuid.UUID) (*string, error) {
	row := q.db.QueryRow(ctx, getRefreshToken, userID)
	var refresh_token *string
	err := row.Scan(&refresh_token)
	return refresh_token, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, email, password, username, refresh_token FROM users where users.email = $1 limit 1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Password,
		&i.Username,
		&i.RefreshToken,
	)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one
SELECT id, email, password, username, refresh_token FROM users where users.id = $1 limit 1
`

func (q *Queries) GetUserByID(ctx context.Context, id uuid.UUID) (User, error) {
	row := q.db.QueryRow(ctx, getUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Password,
		&i.Username,
		&i.RefreshToken,
	)
	return i, err
}

const removeRefreshToken = `-- name: RemoveRefreshToken :exec
UPDATE users 
SET refresh_token = NULL
WHERE id = $1
`

func (q *Queries) RemoveRefreshToken(ctx context.Context, userID uuid.UUID) error {
	_, err := q.db.Exec(ctx, removeRefreshToken, userID)
	return err
}

const updateRefreshToken = `-- name: UpdateRefreshToken :exec
UPDATE users 
SET refresh_token = $1
WHERE id = $2
`

type UpdateRefreshTokenParams struct {
	RefreshToken *string
	UserID       uuid.UUID
}

func (q *Queries) UpdateRefreshToken(ctx context.Context, arg UpdateRefreshTokenParams) error {
	_, err := q.db.Exec(ctx, updateRefreshToken, arg.RefreshToken, arg.UserID)
	return err
}
